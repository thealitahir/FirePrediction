#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('StudentCRUD:server');
var User =  require("../model/user.model.js");
var serviceRequest=require("../model/serviceRequest.model");
var service = require("../model/services");
var geolib=require("geolib");
var VendorLocation=require("../model/vendorLocation.model");
var Vendor =  require("../model/vendor.model");
var ChatModel = require("../model/chat.model");
var geocoder = require('geocoder');
var elasticsearch=require('elasticsearch');
var VehicleInfo = require("../model/vehicleInfo.model.js");
var client = new elasticsearch.Client({
  hosts: [ 'http://216.168.41.46:9200']
});
var compare = require('alphanumeric-sort').compare;
var crg = require('country-reverse-geocoding').country_reverse_geocoding();/**
 * Get port from environment and store in Express.
 */
var FCM = require('fcm-push');
//var port = normalizePort(process.env.PORT || '3000');
app.set('port', 8085);

/**
 * Create HTTP server.
 */

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

global.timeout_functions = [];

/**
 * Listen on provided port, on all network interfaces.
 */

io = require("socket.io").listen(server);

io.on('connection', function(socket){
  //console.log("Socket Connection Established");
 });

/**
 * Normalize a port into a number, string, or false.
 */

//event linstner

function remove_service_request(request_id){
  serviceRequest.findOneAndRemove({_id:request_id}, function(err,data) {
    if (err) {
      console.log("Error in Deleting Service Request.");
    }
    else {
      console.log("Service Request Deleted");
    }
  });
}

//chat socket

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

